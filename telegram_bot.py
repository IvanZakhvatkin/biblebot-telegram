# telegram_bot/telegram_bot.py

import asyncio
import os
import httpx
from datetime import date, timedelta
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# Telegram config
BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_USERNAME = os.getenv("BOT_USERNAME")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–ª–∞–Ω–æ–º —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/today ‚Äî —á—Ç–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/tomorrow ‚Äî —á—Ç–µ–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "/bible ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –ª—é–±—É—é –≥–ª–∞–≤—É –ë–∏–±–ª–∏–∏"
    )

@dp.message(Command("today"))
async def cmd_today(message: Message):
    await message.answer(await fetch_plan(date.today()))

@dp.message(Command("tomorrow"))
async def cmd_tomorrow(message: Message):
    await message.answer(await fetch_plan(date.today() + timedelta(days=1)))

@dp.message(Command("bible"))
async def cmd_bible(message: Message):
    web_url = "https://ivanzakhvatkin.github.io/biblebot-webapp/"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üìñ –û—Ç–∫—Ä—ã—Ç—å –ë–∏–±–ª–∏—é", web_app=WebAppInfo(url=web_url)
            )]
        ]
    )
    await message.answer("–û—Ç–∫—Ä–æ–π –ª—é–±—É—é –∫–Ω–∏–≥—É –∏ –≥–ª–∞–≤—É –ë–∏–±–ª–∏–∏:", reply_markup=keyboard)

async def fetch_plan(date_obj: date) -> str:
    date_str = date_obj.isoformat()
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"http://127.0.0.1:8000/plan?date={date_str}")
            if response.status_code == 200:
                data = response.json()
                if data["readings"]:
                    keys_str = data["readings"][0]["keys"]
                    parts = [part.strip() for part in keys_str.split(";")]
                    links = "\n".join(
                        f'üîπ <a href="https://t.me/{BOT_USERNAME}/webapp?start={date_str}_{p.replace(" ", "_")}">{p}</a>'
                        for p in parts
                    )
                    label = "—Å–µ–≥–æ–¥–Ω—è" if date_obj == date.today() else f"{date_str}"
                    return f"üìñ –ü–ª–∞–Ω —á—Ç–µ–Ω–∏—è –Ω–∞ {label}\n{links}"
                else:
                    return f"–ù–∞ {date_str} –Ω–µ—Ç –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è."
            else:
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"

# ‚è± –§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞
async def autopinger():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("http://localhost:10000/ping")
                print("üîÑ Ping sent to self")
        except Exception as e:
            print(f"‚ùå Ping error: {e}")
        await asyncio.sleep(60)

# üåÄ Web-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
import threading
from fastapi import FastAPI
import uvicorn

fake_app = FastAPI()

@fake_app.get("/")
def root():
    return {"status": "I'm alive"}

@fake_app.get("/ping")
def ping():
    return {"pong": True}

def run_fake_server():
    uvicorn.run(fake_app, host="0.0.0.0", port=10000, log_level="warning")

# üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ
if __name__ == "__main__":
    threading.Thread(target=run_fake_server, daemon=True).start()
    loop = asyncio.get_event_loop()
    loop.create_task(autopinger())
    loop.run_until_complete(dp.start_polling(bot))
